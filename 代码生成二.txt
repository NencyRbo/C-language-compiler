代码生成二
问题描述
请在词法分析、语法分析及语义分析作业的基础上，为编译器实现中间代码生成功能。输入输出及处理要求如下：

需根据文法规则及语义约定，采用自顶向下的语法制导翻译技术，进行语义分析并生成目标代码（PCODE/LLVM IR/MIPS）；

对于选择生成 PCODE 的编译器，约定如下：

完成编译器和解释执行程序，将源文件（统一命名为testfile.txt）编译生成PCODE目标代码并解释执行，得到解释执行的结果（以输出至"pcoderesult.txt"文件中的形式给出），具体要求包括：

需自行设计PCODE，可参考PASCAL-S编译器的处理

将生成的PCODE直接进行解释执行，在提交的作业中不需要输出PCODE

执行PCODE时，输入从标准输入中读取；输出至 pcoderesult.txt 文件中

对于选择生成 LLVM IR 的编译器，约定如下：

完成编译器，将源文件（统一命名为 testfile.txt）编译生成 LLVM IR 代码并输出到文件（统一命名为 llvm_ir.txt），具体要求包括：

需遵照 LLVM IR 的代码规范生成 LLVM IR

此类提交的编译器请仅读取 testfile.txt 文件并生成相应的 LLVM IR 代码，编译器自身不要读入标准输入中的内容。

对于选择生成 MIPS 的编译器，约定如下：

完成编译器，将源文件（统一命名为testfile.txt）编译生成MIPS汇编并输出到文件（统一命名为mips.txt），具体要求包括：

需自行设计四元式中间代码，再从中间代码生成MIPS汇编（中间代码可以使用LLVM IR），请设计实现输出中间代码的有关函数（本次作业不考核，后续会有优化前后中间代码的输出及评判(输出文件命名为学号姓名优化前/后中间代码.txt)

若选择此项任务，后续的作业需参加竞速排序，请提前预留代码优化有关的接口，并设计方便切换开启/关闭优化的模式

自行调试时，可使用Mars仿真器（使用方法见“竞速排序及仿真器使用说明2024”），提交到平台的编译器只需要能按统一的要求生成MIPS汇编代码文件即可

此类提交的编译器请仅读取testfile.txt文件并生成相应的MIPS代码，编译器自身不要读入标准输入中的内容。

输入形式
testfile.txt 为符合文法要求的测试程序。另外可能存在来自于标准输入的数据。

输出形式
生成 PCODE 的编译器，按如上要求生成 PCODE 并解释执行，在 pcoderesult.txt 中记录解释执行结果。

生成 LLVM IR 的编译器，按如上要求将目标代码生成结果输出至 llvm_ir.txt 中。

生成 MIPS 的编译器，按如上要求将目标代码生成结果输出至 mips.txt 中。

样例输入
testfile.txt 如下：

int test;
int main(){
    printf("Hello World\n");
    test = getint();
    printf("%d",test);
    return 0;
}
标准输入 input.txt 如下：

2024
样例输出
pcode 输出到 pcoderesult.txt 中，mips 和 llvm ir只需生成的目标程序能够进行如下标准输出。

Hello World
2024
llvm题目说明
评测机提供了以下函数用于 IO，请在输出的 LLVM IR 头部显式声明这些函数（没有实际使用的函数可以不声明）：

declare i32 @getint()          ; 读取一个整数
declare i32 @getchar()     ; 读取一个字符
declare void @putint(i32)      ; 输出一个整数
declare void @putch(i32)       ; 输出一个字符
declare void @putstr(i8*)      ; 输出字符串
（注意：评测机提供的 IO 函数同时支持字符串输出和单个字符输出（分别对应 MARS 的 4 号和 11 号 syscall），同学们可以自行选择输出方式（选取一种或混合使用均可），具体用法参见样例。如果选用字符串方式输出，可参考LLVM官网上查看更详细的语法约束

特别说明
注意：提交代码时请选择正确的目标代码类型！

生成 LLVM IR 或 MIPS 的编译器请仅读取 testfile.txt 文件并生成相应的目标代码，编译器自身不要读入标准输入中的内容。

本次作业仅用正确的测试程序进行考核，但产生的编译器应具有错误处理能力，即对于正确的测试程序需要生成正确的对应代码，对于错误的测试程序需要进行错误处理，要求同错误处理。

目标代码说明
PCODE代码的定义可参见教材P458, Pascal-S指令代码集，可以进行修改，解释执行程序也可以借鉴Pascal-S编译器源码中的解释执行程序，若PCODE代码修改了请相应修改解释执行程序。

MIPS代码可以选择基础指令及伪指令，不能选择宏指令； MARS 使用 4.5 版本（课程组修改版本），请在平台的“课程资料”中获取课程组修改过的版本Mars.jar以及“竞速排序及仿真器使用说明2024”文档查看具体要求。

LLVM评测机使用12.0.0版本，高版本的一些代码可能过不了测试，请同学们注意。

文档要求
完善参考编译器介绍、总体设计部分文档，完成代码分析阶段设计文档。

提交形式
评测机所采用的编译学生代码的版本是：CMake 3.28.3，C/C++ clang 12.0.0 C++17，Java jdk 17。

上传请将所开发的词法分析程序的源文件（.cpp/.c/.h/.Java，不含工程文件）打包为 zip 后提交。

对于使用 Java 开发的编译器，程序运行的入口为 Compiler.java 中的 main 方法。提交时请直接Compiler.java打包在压缩包的最上层(最上层仅包含一个Compiler.java文件)，不要嵌套一层 src 文件夹。平台 不支持 Java 第三方包。

对于使用 C++ 开发的编译器，可以使用 CMake 进行项目管理。如果使用 CMake，可以自由选择 Clang 支持的 C++ 标准，注意需要使用 project(Compiler) 设置项目名称，确保 CMake 编译后输出的可执行文件名称为 Compiler，提交时需要在压缩包最上层包含 CMakeLists.txt，并且不要提交 CMake 构建过程的临时文件。如果不使用 CMake，平台默认使用 C++ 17 标准。

注意在 MAC 下压缩会产生额外的文件到压缩包中，需删掉额外文件后提交。

提交时，你的压缩包顶层需要包含一个如下内容的json文件（命名为config.json）：

{
    "programming language": "xxx",
    "object code": "yyy"
}
其中，xxx为你的编译器所使用的编程语言（java, c 或 cpp），yyy为你生成的目标代码类型（pcode, llvm 或 mips），所有字母均为小写。如果评测结果为ConfigurationError，说明你的config.json文件存在问题，无法被评测程序解析，请查看评测程序返回的详细信息进行修改。

在本次作业中，填写的目标代码不会与后续作业形成绑定。